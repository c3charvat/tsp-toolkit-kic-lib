name: Pull Request

on:
  pull_request:
  push:
    tags:
      - '*'

jobs:
  style:
    name: Style
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tek-engineering/tsp-toolkit-build:latest
      credentials:
        username: ${{github.actor}}
        password: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: Tool Versions
        run: cargo fmt --version
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check Style
        run: cargo fmt --check --verbose

  lint:
    name: Lint
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tek-engineering/tsp-toolkit-build:latest
      credentials:
        username: ${{github.actor}}
        password: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: Tool Versions
        run: cargo clippy --version
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint
        run: cargo clippy

  sbom:
    name: Generate CycloneDX
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tek-engineering/tsp-toolkit-build:latest
      credentials:
        username: ${{github.actor}}
        password: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Tools
        run: |
          npm ci --devDependencies
      - name: Generate Rust BOM
        run: cargo cyclonedx --format json --output-prefix cargo --output-cdx --all
      - name: Generate NPM BOM
        run: npx @cyclonedx/cyclonedx-npm --output-format JSON --package-lock-only --output-reproducible --output-file npm.cdx.json
      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: software-bom
          path: |
            **/*.cdx.json

  test:
    name: Test
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tek-engineering/tsp-toolkit-build:latest
      credentials:
        username: ${{github.actor}}
        password: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: Tool Versions
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --version
          cargo --version
          grcov --version
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prebuild
        run: mkdir -p ${{env.CARGO_HOME}}; cargo build --tests
        env:
          CARGO_HOME: ".cargo"
          TEST_DIR: "test-results"
      - name: Run Tests
        run: |
          mkdir -p "${{env.TEST_DIR}}"
          cargo +nightly tarpaulin --verbose --all-features --workspace --timeout 120 --engine llvm --out xml --output-dir ${{env.TEST_DIR}}
          cargo test --all -- -Z unstable-options --format json --report-time > ${{env.TEST_DIR}}/cargo_test.json
        env:
          CARGO_HOME: ".cargo"
          TEST_DIR: "test-results"
      - name: Process Test Results
        run: |
          cat ${{env.TEST_DIR}}/cargo_test.json | cargo2junit > ${{env.TEST_DIR}}/report.xml
        env:
          CARGO_HOME: ".cargo"
          TEST_DIR: "test-results"
      - name: Upload Results
        uses: actions/upload-artifact@v3
        if: ${{always()}}
        env:
          CARGO_HOME: ".cargo"
          TEST_DIR: "test-results"
        with:
          name: unit-test-report
          path: |
            ${{env.TEST_DIR}}

  code_coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download Test Results
        uses: actions/download-artifact@v3
        with:
          name: unit-test-report
          path: test-results

      - name: Display structure of downloaded files
        run: ls -R

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        continue-on-error: true
        with:
          filename: test-results/cobertura.xml
          badge: true
          format: markdown
          hide_branch_rate: true
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "30 50"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        continue-on-error: true
        if: github.event_name == 'pull_request'
        with:
          header: Test Coverage
          path: code-coverage-results.md

  build:
    name: Build
    strategy:
      matrix:
        target_triple:
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tek-engineering/tsp-toolkit-build:latest
      credentials:
        username: ${{github.actor}}
        password: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: Tool Versions
        run: rustc --version
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: cargo build --target "${{matrix.target_triple}}" --release
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: executable
          path: |
            target/${{matrix.target_triple}}/release/kic*
            !target/${{matrix.target_triple}}/**/*.d
            !target/${{matrix.target_triple}}/**/*.rlib



